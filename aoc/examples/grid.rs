use aoc::{Grid, GridDrawer};

fn make_grid() -> Vec<String> {
    vec![
        "+.......+".into(),
        ".........".into(),
        ".#.......".into(),
        ".....AA..".into(),
        ".....AA..".into(),
        ".####....".into(),
        ".........".into(),
        ".........".into(),
        ".........".into(),
        "+.......+".into(),
    ]
}

fn print_i64() {
    let grid = aoc::parse_grid_to(&make_grid(), |x| match x {
        '.' => 0,
        '#' => 1,
        'A' => 2,
        '+' => 3,
        _ => panic!(),
    });
    let mut gd = aoc::PrintGridDrawer::new(|x| match x {
        0 => '.',
        1 => '#',
        2 => 'A',
        3 => '+',
        _ => panic!(),
    });
    gd.draw(&grid);
}

fn print_char() {
    let grid = aoc::parse_grid(&make_grid());
    let mut gd = aoc::PrintGridDrawer::new(|x| x);
    gd.draw(&grid);
}

fn save_ppm() {
    let grid = aoc::parse_grid(&make_grid());
    let mut gd = aoc::BitmapSpriteGridDrawer::new(
        (8, 8),
        |x| match x {
            '.' => vec![
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
                [255, 255, 0],
            ],
            '#' => vec![
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 0],
                [255, 0, 0],
                [255, 0, 0],
                [255, 0, 0],
                [255, 0, 0],
                [255, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 0],
                [255, 0, 0],
                [255, 0, 0],
                [255, 0, 0],
                [255, 0, 0],
                [255, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
            ],
            'A' => vec![
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [255, 255, 255],
                [255, 255, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [255, 255, 255],
                [0, 0, 255],
                [0, 0, 255],
                [255, 255, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [255, 255, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [255, 255, 255],
                [0, 0, 255],
                [0, 0, 255],
                [255, 255, 255],
                [255, 255, 255],
                [255, 255, 255],
                [255, 255, 255],
                [255, 255, 255],
                [255, 255, 255],
                [0, 0, 255],
                [0, 0, 255],
                [255, 255, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [255, 255, 255],
                [0, 0, 255],
                [0, 0, 255],
                [255, 255, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [255, 255, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
                [0, 0, 255],
            ],
            '+' => vec![
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 255],
                [255, 0, 255],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 255],
                [255, 0, 255],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 255],
                [255, 0, 255],
                [255, 0, 255],
                [255, 0, 255],
                [255, 0, 255],
                [255, 0, 255],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 255],
                [255, 0, 255],
                [255, 0, 255],
                [255, 0, 255],
                [255, 0, 255],
                [255, 0, 255],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 255],
                [255, 0, 255],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [255, 0, 255],
                [255, 0, 255],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
            ],
            _ => panic!(),
        },
        "ppm/grid/grid",
    );
    gd.draw(&grid);
}

fn print_string(a: &str) {
    let mut g = vec![
        vec![' '; a.len() * aoc::SMALLFONT.glyph_size().0 as usize];
        aoc::SMALLFONT.glyph_size().1 as usize
    ];
    g.text(a, [0, 0], '#');
    let mut gd = aoc::PrintGridDrawer::new(|c| c);
    gd.draw(&g);
}

fn main() {
    print_i64();
    println!();
    print_char();
    save_ppm();
    print_string("Testar lite");
}
