use aoc::Grid;
use std::{collections::HashSet, iter::*};

type Parsed = Vec<Vec<char>>;

#[cfg(feature = "vis")]
mod vis {
    pub struct Drawer {
        drawer: Box<dyn aoc::GridDrawer<Vec<Vec<char>>, char>>,
        grids: Vec<Vec<Vec<char>>>,
    }

    fn make_sprite(c: char) -> Vec<[u8; 3]> {
        if c == '#' {
            vec![
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [148, 148, 255],
                [66, 66, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [66, 66, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [148, 148, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [66, 66, 255],
                [148, 148, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [148, 148, 255],
                [66, 66, 255],
                [148, 148, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [66, 66, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [214, 214, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [148, 148, 255],
                [66, 66, 255],
            ]
        } else if c == 'O' {
            vec![
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [156, 74, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [156, 74, 0],
                [231, 156, 33],
                [156, 74, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [156, 74, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [156, 74, 0],
                [156, 74, 0],
                [0, 0, 0],
                [156, 74, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [156, 74, 0],
                [0, 0, 0],
                [231, 156, 33],
                [0, 0, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [156, 74, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 0, 0],
                [231, 156, 33],
                [156, 74, 0],
                [0, 0, 0],
                [231, 156, 33],
                [0, 0, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 0, 0],
                [231, 156, 33],
                [156, 74, 0],
                [156, 74, 0],
                [0, 0, 0],
                [156, 74, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [156, 74, 0],
                [0, 0, 0],
                [0, 0, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [0, 0, 0],
                [0, 0, 0],
                [156, 74, 0],
                [0, 0, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [156, 74, 0],
                [0, 0, 0],
                [0, 0, 0],
                [231, 156, 33],
                [0, 0, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [231, 156, 33],
                [0, 0, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 0, 0],
                [156, 74, 0],
                [0, 0, 0],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [0, 0, 0],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [156, 74, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 0, 0],
                [156, 74, 0],
                [231, 156, 33],
                [231, 156, 33],
                [156, 74, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
            ]
        } else {
            vec![
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 0, 0],
                [0, 0, 0],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
                [0, 66, 74],
            ]
        }
    }

    impl Drawer {
        pub fn new(name: &str) -> Drawer {
            let mut drawer = aoc::BitmapSpriteGridDrawer::new((16, 16), make_sprite, name);
            drawer.set_bg([0, 0, 0]);
            Drawer {
                drawer: Box::new(drawer),
                grids: vec![],
            }
        }

        pub fn draw(&mut self, grid: &Vec<Vec<char>>) {
            self.grids.push(grid.clone());
        }
    }

    impl Drop for Drawer {
        fn drop(&mut self) {
            for grid in &self.grids {
                self.drawer.draw(&grid);
            }
        }
    }
}

fn slide_rocks(data: &mut Parsed) {
    let ([min_x, min_y], [max_x, max_y]) = data.extents();
    for x in min_x..=max_x {
        for y in min_y..=max_y {
            let p = [x, y];
            if let Some('O') = data.get_value(p) {
                // Slide this north
                let mut pp = p;
                for _ in min_y..y {
                    pp = aoc::point_add(pp, aoc::NORTH);
                    let v = data.get_value(pp);
                    if v == Some('#') || v == Some('O') {
                        pp = aoc::point_add(pp, aoc::SOUTH);
                        break;
                    }
                }
                // Move it
                if pp != p {
                    data.set_value(p, '.');
                    data.set_value(pp, 'O');
                }
                // gd.draw(data);
                // println!();
            }
        }
    }
}

fn get_load(data: &Parsed) -> i64 {
    let ([min_x, min_y], [max_x, max_y]) = data.extents();
    let mut load = 0;
    for x in min_x..=max_x {
        for y in min_y..=max_y {
            let p = [x, y];
            if let Some('O') = data.get_value(p) {
                load += max_y - y + 1;
            }
        }
    }
    load
}

fn part1(data: &Parsed) -> i64 {
    let mut data = data.to_vec();
    slide_rocks(&mut data);
    get_load(&data)
}

fn slide_loop(data: &mut Parsed) {
    // North
    slide_rocks(data);
    // West
    data.rotate_90_cw();
    slide_rocks(data);
    // South
    data.rotate_90_cw();
    slide_rocks(data);
    // East
    data.rotate_90_cw();
    slide_rocks(data);
    // Back again
    data.rotate_90_cw();
}

#[cfg(feature = "vis")]
fn slide_loop_vis(data: &mut Parsed, drawer: &mut vis::Drawer) {
    // North
    slide_rocks(data);
    drawer.draw(data);
    // West
    data.rotate_90_cw();
    slide_rocks(data);
    let mut dd = data.clone();
    dd.rotate_270_cw();
    drawer.draw(&dd);
    // South
    data.rotate_90_cw();
    slide_rocks(data);
    let mut dd = data.clone();
    dd.rotate_180_cw();
    drawer.draw(&dd);
    // East
    data.rotate_90_cw();
    slide_rocks(data);
    let mut dd = data.clone();
    dd.rotate_90_cw();
    drawer.draw(&dd);
    // Back again
    data.rotate_90_cw();
    drawer.draw(data);
}

fn part2(data: &Parsed) -> i64 {
    let mut data = data.to_vec();
    let mut seen: HashSet<Vec<Vec<char>>> = HashSet::new();
    let mut rpt = vec![];
    let mut first_loop = 0;
    let mut second_loop = 0;
    let mut i = 0;
    #[cfg(feature = "vis")]
    let mut drawer = vis::Drawer::new("vis/14/part2");
    loop {
        #[cfg(feature = "vis")]
        slide_loop_vis(&mut data, &mut drawer);
        #[cfg(not(feature = "vis"))]
        slide_loop(&mut data);
        if first_loop == 0 {
            let x = seen.insert(data.clone());
            if !x {
                first_loop = i;
                rpt = data.clone();
            }
        } else if second_loop == 0 && data == rpt {
            second_loop = i;
            break;
        }
        i += 1;
    }
    let rem = 1000000000 - first_loop;
    let rem = rem % (second_loop - first_loop);
    let rem = rem - 1;
    for _ in 0..rem {
        slide_loop(&mut data);
    }
    get_load(&data)
}

fn parse(lines: &[String]) -> Parsed {
    lines.iter().map(|x| x.chars().collect()).collect()
}

fn main() {
    aoc::run_main(parse, part1, part2);
}

#[cfg(test)]
mod tests {
    use super::*;

    fn example() -> Vec<String> {
        vec![
            "O....#....".into(),
            "O.OO#....#".into(),
            ".....##...".into(),
            "OO.#O....O".into(),
            ".O.....O#.".into(),
            "O.#..O.#.#".into(),
            "..O..#O..O".into(),
            ".......O..".into(),
            "#....###..".into(),
            "#OO..#....".into(),
        ]
    }

    #[test]
    fn test_part1() {
        assert_eq!(part1(&parse(&example())), 136);
    }

    #[test]
    fn test_part2() {
        assert_eq!(part2(&parse(&example())), 64);
    }
}
